basePath: /
definitions:
  dto.AdCreateRespDTO:
    properties:
      author_id:
        example: a491c857-dbd0-4a4a-88dc-123456789abc
        type: string
      created_at:
        example: "2025-07-20T12:34:56Z"
        type: string
      description:
        example: Горный велосипед в хорошем состоянии
        type: string
      id:
        example: b72f25de-3ef1-4a36-9675-df31545fa08c
        type: string
      price:
        example: 5000
        type: number
      title:
        example: Велосипед
        type: string
    type: object
  dto.AdDetailedResponseDTO:
    properties:
      author_id:
        example: a491c857-dbd0-4a4a-88dc-123456789abc
        type: string
      author_name:
        example: Иван
        type: string
      created_at:
        example: "2025-07-20T12:34:56Z"
        type: string
      description:
        example: Горный велосипед в хорошем состоянии
        type: string
      id:
        example: b72f25de-3ef1-4a36-9675-df31545fa08c
        type: string
      images:
        example:
        - '[''/static/upload/1.jpg'''
        - '''/static/upload/2.png'']'
        items:
          type: string
        type: array
      is_owner:
        example: true
        type: boolean
      price:
        example: 5000
        type: number
      title:
        example: Велосипед
        type: string
    type: object
  dto.AdResponseDTO:
    properties:
      author_id:
        example: a491c857-dbd0-4a4a-88dc-123456789abc
        type: string
      author_name:
        example: Иван
        type: string
      created_at:
        example: "2025-07-20T12:34:56Z"
        type: string
      description:
        example: Горный велосипед в хорошем состоянии
        type: string
      id:
        example: b72f25de-3ef1-4a36-9675-df31545fa08c
        type: string
      images:
        example:
        - '[''/static/upload/1.jpg'''
        - '''/static/upload/2.png'']'
        items:
          type: string
        type: array
      is_owner:
        example: true
        type: boolean
      price:
        example: 5000
        type: number
      title:
        example: Велосипед
        type: string
    type: object
  dto.AdsCreateDTO:
    properties:
      description:
        example: Горный велосипед в хорошем состоянии
        type: string
      price:
        example: 5000
        type: number
      title:
        example: Велосипед
        type: string
    type: object
  dto.AdsResponseDTO:
    properties:
      ads:
        items:
          $ref: '#/definitions/dto.AdResponseDTO'
        type: array
    type: object
  dto.Err400:
    properties:
      code:
        example: 400
        type: integer
      message:
        example: invalid JSON
        type: string
    type: object
  dto.Err400BadRequest:
    properties:
      code:
        example: 400
        type: integer
      message:
        example: bad request
        type: string
    type: object
  dto.Err401:
    properties:
      code:
        example: 401
        type: integer
      message:
        example: incorrect email or password
        type: string
    type: object
  dto.Err401Unauthorized:
    properties:
      code:
        example: 401
        type: integer
      message:
        example: unauthorized
        type: string
    type: object
  dto.Err404AdNotFound:
    properties:
      code:
        example: 404
        type: integer
      message:
        example: ad not found
        type: string
    type: object
  dto.Err415:
    properties:
      code:
        example: 415
        type: integer
      message:
        example: unsupported content type
        type: string
    type: object
  dto.Err500:
    properties:
      code:
        example: 500
        type: integer
      message:
        example: internal server error
        type: string
    type: object
  dto.Err500Internal:
    properties:
      code:
        example: 500
        type: integer
      message:
        example: internal server error
        type: string
    type: object
  dto.ErrDTO400:
    properties:
      code:
        example: 400
        type: integer
      message:
        example: invalid json
        type: string
    type: object
  dto.ErrDTO409:
    properties:
      code:
        example: 409
        type: integer
      message:
        example: email already exists
        type: string
    type: object
  dto.ErrDTO500:
    properties:
      code:
        example: 500
        type: integer
      message:
        example: internal server error
        type: string
    type: object
  dto.ErrImagesNotFoundExample:
    properties:
      code:
        example: 404
        type: integer
      data:
        items:
          type: object
        type: array
      message:
        example: image not found
        type: string
    type: object
  dto.ErrResponse400:
    properties:
      code:
        example: 400
        type: integer
      message:
        example: Bad Request
        type: string
    type: object
  dto.ErrResponse401:
    properties:
      code:
        example: 401
        type: integer
      message:
        example: unauthorized
        type: string
    type: object
  dto.ErrResponse401Unauthorized:
    properties:
      code:
        example: 401
        type: integer
      message:
        example: unauthorized
        type: string
    type: object
  dto.ErrResponse404:
    properties:
      code:
        example: 404
        type: integer
      message:
        example: Not Found
        type: string
    type: object
  dto.ErrResponse404ArrExample:
    properties:
      body:
        description: 'in: body'
        properties:
          code:
            example: 404
            type: integer
          data:
            items:
              type: object
            type: array
          message:
            example: Not Found
            type: string
        type: object
    type: object
  dto.ErrResponse500:
    properties:
      code:
        example: 500
        type: integer
      message:
        example: internal server error
        type: string
    type: object
  dto.LoginRequestDTO:
    properties:
      email:
        example: user@example.com
        type: string
      password:
        example: my_secure_password
        type: string
    type: object
  dto.LoginResponseDTO:
    properties:
      token:
        example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
        type: string
    type: object
  dto.RegUserRequestDTO:
    properties:
      email:
        example: ivan@example.com
        type: string
      name:
        example: Иван
        type: string
      password:
        example: secret123
        type: string
    type: object
  dto.RegUserResponseDTO:
    properties:
      createdAt:
        example: "2025-07-20T12:34:56Z"
        type: string
      email:
        example: ivan@example.com
        type: string
      id:
        example: b6c859e5-5586-4e52-b02a-82678f30a3fa
        type: string
      name:
        example: Иван
        type: string
    type: object
  dto.ResponseDTO:
    properties:
      adId:
        example: 92d1b029-10b6-4df4-8463-b3272e4f15ee
        type: string
      createdAt:
        example: "2025-07-20T12:34:56Z"
        type: string
      id:
        example: f8c7e2a1-72e1-4c9e-bd84-7ae1b8fc4d4b
        type: string
      imageUrl:
        example: /static/upload/example.jpg
        type: string
    type: object
host: localhost:8080
info:
  contact: {}
  description: This is the API documentation for the Market backend.
  title: Market API
  version: "1.0"
paths:
  /api/v1/ads:
    get:
      consumes:
      - application/json
      description: Возвращает список всех объявлений. Не требует авторизации, но если
        токен передан — отмечает ваши объявления как `is_owner=true`.
      parameters:
      - description: Ограничение по количеству
        in: query
        name: limit
        type: integer
      - description: Смещение
        in: query
        name: offset
        type: integer
      - description: Поле для сортировки
        in: query
        name: sort
        type: string
      - description: asc или desc
        in: query
        name: order
        type: string
      - description: Минимальная цена
        in: query
        name: min
        type: number
      - description: Максимальная цена
        in: query
        name: max
        type: number
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.AdsResponseDTO'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ErrResponse400'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dto.ErrResponse404ArrExample'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrResponse500'
      summary: Получить все объявления
      tags:
      - ads
    post:
      consumes:
      - application/json
      description: Создает новое объявление. Требует авторизации.
      parameters:
      - description: Создаваемое объявление
        in: body
        name: ad
        required: true
        schema:
          $ref: '#/definitions/dto.AdsCreateDTO'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/dto.AdCreateRespDTO'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ErrResponse400'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.ErrResponse401'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrResponse500'
      security:
      - BearerAuth: []
      summary: Создать объявление
      tags:
      - ads
  /api/v1/ads/{id}:
    get:
      consumes:
      - application/json
      description: Возвращает детальное объявление. Можно передать токен, чтобы узнать
        `is_owner`.
      parameters:
      - description: ID объявления
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.AdDetailedResponseDTO'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ErrResponse400'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dto.ErrResponse404'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrResponse500'
      summary: Получить объявление по ID
      tags:
      - ads
  /api/v1/ads/{id}/images:
    get:
      description: Возвращает список изображений, прикреплённых к объявлению
      parameters:
      - description: ID объявления
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Список изображений
          schema:
            items:
              $ref: '#/definitions/dto.ResponseDTO'
            type: array
        "400":
          description: Некорректный ID
          schema:
            $ref: '#/definitions/dto.Err400BadRequest'
        "401":
          description: Пользователь не авторизован
          schema:
            $ref: '#/definitions/dto.Err401Unauthorized'
        "404":
          description: Изображения не найдены или объявление не существует
          schema:
            $ref: '#/definitions/dto.ErrImagesNotFoundExample'
        "500":
          description: Внутренняя ошибка сервера
          schema:
            $ref: '#/definitions/dto.Err500Internal'
      summary: Получить изображения объявления
      tags:
      - image
    post:
      consumes:
      - multipart/form-data
      description: Загружает изображение в формате JPEG или PNG для указанного объявления.
        Требует авторизации.
      parameters:
      - description: ID объявления
        in: path
        name: id
        required: true
        type: string
      - description: Изображение (jpeg или png)
        in: formData
        name: image
        required: true
        type: file
      produces:
      - application/json
      responses:
        "201":
          description: Успешная загрузка изображения
          schema:
            $ref: '#/definitions/dto.ResponseDTO'
        "400":
          description: Невалидный файл или данные
          schema:
            $ref: '#/definitions/dto.Err400BadRequest'
        "401":
          description: Пользователь не авторизован
          schema:
            $ref: '#/definitions/dto.Err401Unauthorized'
        "404":
          description: Объявление не найдено
          schema:
            $ref: '#/definitions/dto.Err404AdNotFound'
        "415":
          description: Неподдерживаемый тип файла
          schema:
            $ref: '#/definitions/dto.Err415'
        "500":
          description: Внутренняя ошибка сервера
          schema:
            $ref: '#/definitions/dto.Err500Internal'
      security:
      - BearerAuth: []
      summary: Загрузить изображение для объявления
      tags:
      - image
  /api/v1/ads/images/{id}:
    get:
      description: Возвращает одно изображение по его ID
      parameters:
      - description: ID изображения
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Данные изображения
          schema:
            $ref: '#/definitions/dto.ResponseDTO'
        "400":
          description: ID изображения не указан
          schema:
            $ref: '#/definitions/dto.Err400BadRequest'
        "401":
          description: Пользователь не авторизован
          schema:
            $ref: '#/definitions/dto.Err401Unauthorized'
        "404":
          description: Изображение не найдено
          schema:
            $ref: '#/definitions/dto.Err404AdNotFound'
        "500":
          description: Внутренняя ошибка сервера
          schema:
            $ref: '#/definitions/dto.Err500Internal'
      summary: Получить изображение по ID
      tags:
      - image
  /api/v1/login:
    post:
      consumes:
      - application/json
      description: Авторизует пользователя по email и паролю и возвращает токен
      parameters:
      - description: Данные для входа
        in: body
        name: credentials
        required: true
        schema:
          $ref: '#/definitions/dto.LoginRequestDTO'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.LoginResponseDTO'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.Err400'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.Err401'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.Err500'
      summary: Вход пользователя
      tags:
      - auth
  /api/v1/logout:
    post:
      consumes:
      - application/json
      description: Удаляет сессию пользователя. Требует авторизации (по токену).
      produces:
      - application/json
      responses:
        "200":
          description: Успешный выход из системы
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.ErrResponse401Unauthorized'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.Err500'
      security:
      - BearerAuth: []
      summary: Выход пользователя
      tags:
      - auth
  /api/v1/register:
    post:
      consumes:
      - application/json
      description: Регистрирует нового пользователя по имени, email и паролю
      parameters:
      - description: Данные для регистрации
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/dto.RegUserRequestDTO'
      produces:
      - application/json
      responses:
        "201":
          description: Пользователь успешно зарегистрирован
          schema:
            $ref: '#/definitions/dto.RegUserResponseDTO'
        "400":
          description: Некорректный JSON или поля
          schema:
            $ref: '#/definitions/dto.ErrDTO400'
        "409":
          description: Email уже существует
          schema:
            $ref: '#/definitions/dto.ErrDTO409'
        "500":
          description: Внутренняя ошибка сервера
          schema:
            $ref: '#/definitions/dto.ErrDTO500'
      summary: Регистрация пользователя
      tags:
      - auth
securityDefinitions:
  BearerAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
