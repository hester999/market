// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/api/v1/ads": {
            "get": {
                "description": "Возвращает список всех объявлений. Не требует авторизации, но если токен передан — отмечает ваши объявления как ` + "`" + `is_owner=true` + "`" + `.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "ads"
                ],
                "summary": "Получить все объявления",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Ограничение по количеству",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Смещение",
                        "name": "offset",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Поле для сортировки",
                        "name": "sort",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "asc или desc",
                        "name": "order",
                        "in": "query"
                    },
                    {
                        "type": "number",
                        "description": "Минимальная цена",
                        "name": "min",
                        "in": "query"
                    },
                    {
                        "type": "number",
                        "description": "Максимальная цена",
                        "name": "max",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.AdsResponseDTO"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrResponse400"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrResponse404ArrExample"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrResponse500"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Создает новое объявление. Требует авторизации.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "ads"
                ],
                "summary": "Создать объявление",
                "parameters": [
                    {
                        "description": "Создаваемое объявление",
                        "name": "ad",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.AdsCreateDTO"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/dto.AdCreateRespDTO"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrResponse400"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrResponse401"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrResponse500"
                        }
                    }
                }
            }
        },
        "/api/v1/ads/images/{id}": {
            "get": {
                "description": "Возвращает одно изображение по его ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "image"
                ],
                "summary": "Получить изображение по ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "ID изображения",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Данные изображения",
                        "schema": {
                            "$ref": "#/definitions/dto.ResponseDTO"
                        }
                    },
                    "400": {
                        "description": "ID изображения не указан",
                        "schema": {
                            "$ref": "#/definitions/dto.Err400BadRequest"
                        }
                    },
                    "401": {
                        "description": "Пользователь не авторизован",
                        "schema": {
                            "$ref": "#/definitions/dto.Err401Unauthorized"
                        }
                    },
                    "404": {
                        "description": "Изображение не найдено",
                        "schema": {
                            "$ref": "#/definitions/dto.Err404AdNotFound"
                        }
                    },
                    "500": {
                        "description": "Внутренняя ошибка сервера",
                        "schema": {
                            "$ref": "#/definitions/dto.Err500Internal"
                        }
                    }
                }
            }
        },
        "/api/v1/ads/{id}": {
            "get": {
                "description": "Возвращает детальное объявление. Можно передать токен, чтобы узнать ` + "`" + `is_owner` + "`" + `.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "ads"
                ],
                "summary": "Получить объявление по ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "ID объявления",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.AdDetailedResponseDTO"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrResponse400"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrResponse404"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrResponse500"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Удаляет объявление по ID. Только владелец может удалить объявление. Требует авторизации.",
                "tags": [
                    "ads"
                ],
                "summary": "Удалить объявление",
                "parameters": [
                    {
                        "type": "string",
                        "description": "ID объявления",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "ID объявления не передан",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrResponse400"
                        }
                    },
                    "401": {
                        "description": "Пользователь не авторизован",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrResponse401"
                        }
                    },
                    "403": {
                        "description": "Нет прав на удаление чужого объявления",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrResponse403"
                        }
                    },
                    "404": {
                        "description": "Объявление не найдено",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrResponse404"
                        }
                    },
                    "500": {
                        "description": "Внутренняя ошибка сервера",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrResponse500"
                        }
                    }
                }
            }
        },
        "/api/v1/ads/{id}/images": {
            "get": {
                "description": "Возвращает список изображений, прикреплённых к объявлению",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "image"
                ],
                "summary": "Получить изображения объявления",
                "parameters": [
                    {
                        "type": "string",
                        "description": "ID объявления",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Список изображений",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/dto.ResponseDTO"
                            }
                        }
                    },
                    "400": {
                        "description": "Некорректный ID",
                        "schema": {
                            "$ref": "#/definitions/dto.Err400BadRequest"
                        }
                    },
                    "401": {
                        "description": "Пользователь не авторизован",
                        "schema": {
                            "$ref": "#/definitions/dto.Err401Unauthorized"
                        }
                    },
                    "404": {
                        "description": "Изображения не найдены или объявление не существует",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrImagesNotFoundExample"
                        }
                    },
                    "500": {
                        "description": "Внутренняя ошибка сервера",
                        "schema": {
                            "$ref": "#/definitions/dto.Err500Internal"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Загружает изображение в формате JPEG или PNG для указанного объявления. Требует авторизации.",
                "consumes": [
                    "multipart/form-data"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "image"
                ],
                "summary": "Загрузить изображение для объявления",
                "parameters": [
                    {
                        "type": "string",
                        "description": "ID объявления",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "file",
                        "description": "Изображение (jpeg или png)",
                        "name": "image",
                        "in": "formData",
                        "required": true
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Успешная загрузка изображения",
                        "schema": {
                            "$ref": "#/definitions/dto.ResponseDTO"
                        }
                    },
                    "400": {
                        "description": "Невалидный файл или данные",
                        "schema": {
                            "$ref": "#/definitions/dto.Err400BadRequest"
                        }
                    },
                    "401": {
                        "description": "Пользователь не авторизован",
                        "schema": {
                            "$ref": "#/definitions/dto.Err401Unauthorized"
                        }
                    },
                    "404": {
                        "description": "Объявление не найдено",
                        "schema": {
                            "$ref": "#/definitions/dto.Err404AdNotFound"
                        }
                    },
                    "415": {
                        "description": "Неподдерживаемый тип файла",
                        "schema": {
                            "$ref": "#/definitions/dto.Err415"
                        }
                    },
                    "500": {
                        "description": "Внутренняя ошибка сервера",
                        "schema": {
                            "$ref": "#/definitions/dto.Err500Internal"
                        }
                    }
                }
            }
        },
        "/api/v1/login": {
            "post": {
                "description": "Авторизует пользователя по email и паролю и возвращает токен",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Вход пользователя",
                "parameters": [
                    {
                        "description": "Данные для входа",
                        "name": "credentials",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.LoginRequestDTO"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.LoginResponseDTO"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/dto.Err400"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/dto.Err401"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/dto.Err500"
                        }
                    }
                }
            }
        },
        "/api/v1/logout": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Удаляет сессию пользователя. Требует авторизации (по токену).",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Выход пользователя",
                "responses": {
                    "200": {
                        "description": "Успешный выход из системы"
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrResponse401Unauthorized"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/dto.Err500"
                        }
                    }
                }
            }
        },
        "/api/v1/register": {
            "post": {
                "description": "Регистрирует нового пользователя по имени, email и паролю",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Регистрация пользователя",
                "parameters": [
                    {
                        "description": "Данные для регистрации",
                        "name": "user",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.RegUserRequestDTO"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Пользователь успешно зарегистрирован",
                        "schema": {
                            "$ref": "#/definitions/dto.RegUserResponseDTO"
                        }
                    },
                    "400": {
                        "description": "Некорректный JSON или поля",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrDTO400"
                        }
                    },
                    "409": {
                        "description": "Email уже существует",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrDTO409"
                        }
                    },
                    "500": {
                        "description": "Внутренняя ошибка сервера",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrDTO500"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "dto.AdCreateRespDTO": {
            "type": "object",
            "properties": {
                "author_id": {
                    "type": "string",
                    "example": "a491c857-dbd0-4a4a-88dc-123456789abc"
                },
                "created_at": {
                    "type": "string",
                    "example": "2025-07-20T12:34:56Z"
                },
                "description": {
                    "type": "string",
                    "example": "Горный велосипед в хорошем состоянии"
                },
                "id": {
                    "type": "string",
                    "example": "b72f25de-3ef1-4a36-9675-df31545fa08c"
                },
                "price": {
                    "type": "number",
                    "example": 5000
                },
                "title": {
                    "type": "string",
                    "example": "Велосипед"
                }
            }
        },
        "dto.AdDetailedResponseDTO": {
            "type": "object",
            "properties": {
                "author_id": {
                    "type": "string",
                    "example": "a491c857-dbd0-4a4a-88dc-123456789abc"
                },
                "author_name": {
                    "type": "string",
                    "example": "Иван"
                },
                "created_at": {
                    "type": "string",
                    "example": "2025-07-20T12:34:56Z"
                },
                "description": {
                    "type": "string",
                    "example": "Горный велосипед в хорошем состоянии"
                },
                "id": {
                    "type": "string",
                    "example": "b72f25de-3ef1-4a36-9675-df31545fa08c"
                },
                "images": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        "['/static/upload/1.jpg'",
                        "'/static/upload/2.png']"
                    ]
                },
                "is_owner": {
                    "type": "boolean",
                    "example": true
                },
                "price": {
                    "type": "number",
                    "example": 5000
                },
                "title": {
                    "type": "string",
                    "example": "Велосипед"
                }
            }
        },
        "dto.AdResponseDTO": {
            "type": "object",
            "properties": {
                "author_id": {
                    "type": "string",
                    "example": "a491c857-dbd0-4a4a-88dc-123456789abc"
                },
                "author_name": {
                    "type": "string",
                    "example": "Иван"
                },
                "created_at": {
                    "type": "string",
                    "example": "2025-07-20T12:34:56Z"
                },
                "description": {
                    "type": "string",
                    "example": "Горный велосипед в хорошем состоянии"
                },
                "id": {
                    "type": "string",
                    "example": "b72f25de-3ef1-4a36-9675-df31545fa08c"
                },
                "images": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        "['/static/upload/1.jpg'",
                        "'/static/upload/2.png']"
                    ]
                },
                "is_owner": {
                    "type": "boolean",
                    "example": true
                },
                "price": {
                    "type": "number",
                    "example": 5000
                },
                "title": {
                    "type": "string",
                    "example": "Велосипед"
                }
            }
        },
        "dto.AdsCreateDTO": {
            "type": "object",
            "properties": {
                "description": {
                    "type": "string",
                    "example": "Горный велосипед в хорошем состоянии"
                },
                "price": {
                    "type": "number",
                    "example": 5000
                },
                "title": {
                    "type": "string",
                    "example": "Велосипед"
                }
            }
        },
        "dto.AdsResponseDTO": {
            "type": "object",
            "properties": {
                "ads": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dto.AdResponseDTO"
                    }
                }
            }
        },
        "dto.Err400": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer",
                    "example": 400
                },
                "message": {
                    "type": "string",
                    "example": "invalid JSON"
                }
            }
        },
        "dto.Err400BadRequest": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer",
                    "example": 400
                },
                "message": {
                    "type": "string",
                    "example": "bad request"
                }
            }
        },
        "dto.Err401": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer",
                    "example": 401
                },
                "message": {
                    "type": "string",
                    "example": "incorrect email or password"
                }
            }
        },
        "dto.Err401Unauthorized": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer",
                    "example": 401
                },
                "message": {
                    "type": "string",
                    "example": "unauthorized"
                }
            }
        },
        "dto.Err404AdNotFound": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer",
                    "example": 404
                },
                "message": {
                    "type": "string",
                    "example": "ad not found"
                }
            }
        },
        "dto.Err415": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer",
                    "example": 415
                },
                "message": {
                    "type": "string",
                    "example": "unsupported content type"
                }
            }
        },
        "dto.Err500": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer",
                    "example": 500
                },
                "message": {
                    "type": "string",
                    "example": "internal server error"
                }
            }
        },
        "dto.Err500Internal": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer",
                    "example": 500
                },
                "message": {
                    "type": "string",
                    "example": "internal server error"
                }
            }
        },
        "dto.ErrDTO400": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer",
                    "example": 400
                },
                "message": {
                    "type": "string",
                    "example": "invalid json"
                }
            }
        },
        "dto.ErrDTO409": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer",
                    "example": 409
                },
                "message": {
                    "type": "string",
                    "example": "email already exists"
                }
            }
        },
        "dto.ErrDTO500": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer",
                    "example": 500
                },
                "message": {
                    "type": "string",
                    "example": "internal server error"
                }
            }
        },
        "dto.ErrImagesNotFoundExample": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer",
                    "example": 404
                },
                "data": {
                    "type": "array",
                    "items": {
                        "type": "object"
                    }
                },
                "message": {
                    "type": "string",
                    "example": "image not found"
                }
            }
        },
        "dto.ErrResponse400": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer",
                    "example": 400
                },
                "message": {
                    "type": "string",
                    "example": "Bad Request"
                }
            }
        },
        "dto.ErrResponse401": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer",
                    "example": 401
                },
                "message": {
                    "type": "string",
                    "example": "unauthorized"
                }
            }
        },
        "dto.ErrResponse401Unauthorized": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer",
                    "example": 401
                },
                "message": {
                    "type": "string",
                    "example": "unauthorized"
                }
            }
        },
        "dto.ErrResponse403": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer",
                    "example": 403
                },
                "message": {
                    "type": "string",
                    "example": "you are not owner"
                }
            }
        },
        "dto.ErrResponse404": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer",
                    "example": 404
                },
                "message": {
                    "type": "string",
                    "example": "Not Found"
                }
            }
        },
        "dto.ErrResponse404ArrExample": {
            "type": "object",
            "properties": {
                "body": {
                    "description": "in: body",
                    "type": "object",
                    "properties": {
                        "code": {
                            "type": "integer",
                            "example": 404
                        },
                        "data": {
                            "type": "array",
                            "items": {
                                "type": "object"
                            }
                        },
                        "message": {
                            "type": "string",
                            "example": "Not Found"
                        }
                    }
                }
            }
        },
        "dto.ErrResponse500": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer",
                    "example": 500
                },
                "message": {
                    "type": "string",
                    "example": "internal server error"
                }
            }
        },
        "dto.LoginRequestDTO": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string",
                    "example": "user@example.com"
                },
                "password": {
                    "type": "string",
                    "example": "my_secure_password"
                }
            }
        },
        "dto.LoginResponseDTO": {
            "type": "object",
            "properties": {
                "token": {
                    "type": "string",
                    "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
                }
            }
        },
        "dto.RegUserRequestDTO": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string",
                    "example": "ivan@example.com"
                },
                "name": {
                    "type": "string",
                    "example": "Иван"
                },
                "password": {
                    "type": "string",
                    "example": "secret123"
                }
            }
        },
        "dto.RegUserResponseDTO": {
            "type": "object",
            "properties": {
                "createdAt": {
                    "type": "string",
                    "example": "2025-07-20T12:34:56Z"
                },
                "email": {
                    "type": "string",
                    "example": "ivan@example.com"
                },
                "id": {
                    "type": "string",
                    "example": "b6c859e5-5586-4e52-b02a-82678f30a3fa"
                },
                "name": {
                    "type": "string",
                    "example": "Иван"
                }
            }
        },
        "dto.ResponseDTO": {
            "type": "object",
            "properties": {
                "adId": {
                    "type": "string",
                    "example": "92d1b029-10b6-4df4-8463-b3272e4f15ee"
                },
                "createdAt": {
                    "type": "string",
                    "example": "2025-07-20T12:34:56Z"
                },
                "id": {
                    "type": "string",
                    "example": "f8c7e2a1-72e1-4c9e-bd84-7ae1b8fc4d4b"
                },
                "imageUrl": {
                    "type": "string",
                    "example": "/static/upload/example.jpg"
                }
            }
        }
    },
    "securityDefinitions": {
        "BearerAuth": {
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "localhost:8080",
	BasePath:         "/",
	Schemes:          []string{},
	Title:            "Market API",
	Description:      "This is the API documentation for the Market backend.",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
